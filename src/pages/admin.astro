---
import AuthLayout from "../components/AuthLayout.astro";
import { getUser } from "../utils/auth";
import { supabase } from "../utils/database";

const user = await getUser(Astro.cookies);

if (!user) {
  return Astro.redirect('/login');
}

const adminEmails = (import.meta.env.ADMIN_EMAILS || '').split(',').map((e: string) => e.trim());
const isAdmin = adminEmails.includes(user.email);

if (!isAdmin) {
  return Astro.redirect('/dashboard');
}

let allOrders: any[] = [];
let allRewards: any[] = [];
let allUsers = new Map();

if (supabase) {
  const { data: ordersData } = await supabase
    .from('orders')
    .select('*')
    .order('created_at', { ascending: false });
  
  allOrders = ordersData || [];

  const { data: rewardsData } = await supabase
    .from('rewards')
    .select('*')
    .order('created_at', { ascending: false });
  
  allRewards = rewardsData || [];

  const userIds = new Set([...allOrders.map(o => o.user_id), ...allRewards.map(r => r.user_id)]);
  
  for (const userId of userIds) {
    const { data: userData } = await supabase.auth.admin.getUserById(userId);
    if (userData?.user) {
      allUsers.set(userId, userData.user);
    }
  }
}

let success = '';
let error = '';
const url = new URL(Astro.request.url);
success = url.searchParams.get('success') || '';
error = url.searchParams.get('error') || '';
---

<AuthLayout title="Admin Dashboard" user={user}>
  <div class="space-y-8">
    <div class="bg-abbco-gold text-white rounded-lg shadow-lg p-6">
      <h1 class="text-3xl font-bold">Admin Dashboard</h1>
      <p class="mt-2">Manage orders and rewards for ABBCo Loyalty</p>
    </div>

    {success && (
      <div class="p-4 bg-green-100 border border-green-400 text-green-700 rounded-lg">
        {success}
      </div>
    )}
    
    {error && (
      <div class="p-4 bg-red-100 border border-red-400 text-red-700 rounded-lg">
        {error}
      </div>
    )}

    <div class="bg-white rounded-lg shadow-lg p-8 border-2 border-abbco-gold/20">
      <h2 class="text-2xl font-bold mb-6">All Orders</h2>
      
      {allOrders.length === 0 ? (
        <p class="text-abbco-charcoal/60 text-center py-8">No orders submitted yet.</p>
      ) : (
        <div class="overflow-x-auto">
          <table class="min-w-full">
            <thead>
              <tr class="border-b-2 border-abbco-charcoal/10">
                <th class="text-left py-3 px-2">User Email</th>
                <th class="text-left py-3 px-2">Order Number</th>
                <th class="text-left py-3 px-2">Source</th>
                <th class="text-left py-3 px-2">Date</th>
                <th class="text-left py-3 px-2">Status</th>
                <th class="text-left py-3 px-2">Actions</th>
              </tr>
            </thead>
            <tbody>
              {allOrders.map((order) => {
                const orderUser = allUsers.get(order.user_id);
                return (
                  <tr class="border-b border-abbco-charcoal/5">
                    <td class="py-3 px-2 text-sm">{orderUser?.email || 'Unknown'}</td>
                    <td class="py-3 px-2 font-mono text-sm">{order.order_number}</td>
                    <td class="py-3 px-2 capitalize text-sm">{order.source}</td>
                    <td class="py-3 px-2 text-sm">{new Date(order.order_date).toLocaleDateString()}</td>
                    <td class="py-3 px-2">
                      <span class={`inline-block px-2 py-1 rounded-full text-xs font-semibold ${
                        order.status === 'verified' ? 'bg-green-100 text-green-800' :
                        order.status === 'rejected' ? 'bg-red-100 text-red-800' :
                        'bg-yellow-100 text-yellow-800'
                      }`}>
                        {order.status}
                      </span>
                    </td>
                    <td class="py-3 px-2">
                      <div class="flex gap-2">
                        {order.status === 'pending' && (
                          <>
                            <form action="/api/admin/orders/verify" method="POST" class="inline">
                              <input type="hidden" name="order_id" value={order.id} />
                              <button
                                type="submit"
                                class="bg-green-600 text-white text-xs px-3 py-1 rounded hover:bg-green-700 transition"
                              >
                                Verify
                              </button>
                            </form>
                            <form action="/api/admin/orders/reject" method="POST" class="inline">
                              <input type="hidden" name="order_id" value={order.id} />
                              <button
                                type="submit"
                                class="bg-red-600 text-white text-xs px-3 py-1 rounded hover:bg-red-700 transition"
                              >
                                Reject
                              </button>
                            </form>
                          </>
                        )}
                        {order.receipt_url && (
                          <a
                            href={order.receipt_url}
                            target="_blank"
                            class="bg-blue-600 text-white text-xs px-3 py-1 rounded hover:bg-blue-700 transition"
                          >
                            View
                          </a>
                        )}
                      </div>
                    </td>
                  </tr>
                );
              })}
            </tbody>
          </table>
        </div>
      )}
    </div>

    <div class="bg-white rounded-lg shadow-lg p-8 border-2 border-abbco-gold/20">
      <h2 class="text-2xl font-bold mb-6">All Rewards</h2>
      
      {allRewards.length === 0 ? (
        <p class="text-abbco-charcoal/60 text-center py-8">No rewards claimed yet.</p>
      ) : (
        <div class="overflow-x-auto">
          <table class="min-w-full">
            <thead>
              <tr class="border-b-2 border-abbco-charcoal/10">
                <th class="text-left py-3 px-2">User Email</th>
                <th class="text-left py-3 px-2">Status</th>
                <th class="text-left py-3 px-2">Address</th>
                <th class="text-left py-3 px-2">Claimed</th>
                <th class="text-left py-3 px-2">Actions</th>
              </tr>
            </thead>
            <tbody>
              {allRewards.map((reward) => {
                const rewardUser = allUsers.get(reward.user_id);
                return (
                  <tr class="border-b border-abbco-charcoal/5">
                    <td class="py-3 px-2 text-sm">{rewardUser?.email || 'Unknown'}</td>
                    <td class="py-3 px-2">
                      <span class={`inline-block px-2 py-1 rounded-full text-xs font-semibold ${
                        reward.status === 'fulfilled' ? 'bg-green-100 text-green-800' :
                        reward.status === 'claimed' ? 'bg-blue-100 text-blue-800' :
                        'bg-gray-100 text-gray-800'
                      }`}>
                        {reward.status}
                      </span>
                    </td>
                    <td class="py-3 px-2 text-sm max-w-xs truncate">{reward.claim_address || 'N/A'}</td>
                    <td class="py-3 px-2 text-sm">{new Date(reward.created_at).toLocaleDateString()}</td>
                    <td class="py-3 px-2">
                      {reward.status === 'claimed' && (
                        <form action="/api/admin/rewards/fulfill" method="POST" class="inline">
                          <input type="hidden" name="reward_id" value={reward.id} />
                          <button
                            type="submit"
                            class="bg-abbco-gold text-white text-xs px-3 py-1 rounded hover:bg-abbco-gold/90 transition"
                          >
                            Mark Fulfilled
                          </button>
                        </form>
                      )}
                    </td>
                  </tr>
                );
              })}
            </tbody>
          </table>
        </div>
      )}
    </div>
  </div>
</AuthLayout>
